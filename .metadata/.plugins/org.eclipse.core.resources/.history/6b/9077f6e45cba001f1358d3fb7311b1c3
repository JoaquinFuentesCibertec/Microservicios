package com.proyecto.service;

import com.proyecto.FeignClient.ClienteFeignClient;
import com.proyecto.models.Cliente;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;

@Service
public class ReporteClienteService {

    @Autowired
    private ClienteFeignClient clienteFeignClient;  // ClienteFeignClient se utiliza para obtener los datos de los clientes

    public byte[] generarReporteClientes() throws IOException {
        // Obtener todos los clientes desde el microservicio correspondiente
        List<Cliente> clientes = clienteFeignClient.listarTodos();

        // Crear un string HTML a partir de los datos de los clientes
        StringBuilder htmlContent = new StringBuilder();
        htmlContent.append("<html><head><style>/* Aquí van tus estilos personalizados */</style></head><body>");
        htmlContent.append("<h1>Reporte de Clientes</h1>");
        htmlContent.append("<table border='1'>");
        htmlContent.append("<tr><th>ID</th><th>Nombre</th><th>Apellido Paterno</th><th>Apellido Materno</th><th>Dirección</th><th>Correo</th><th>Fecha Ingreso</th></tr>");

        for (Cliente cliente : clientes) {
            htmlContent.append("<tr>")
                .append("<td>").append(cliente.getId()).append("</td>")
                .append("<td>").append(cliente.getNombre()).append("</td>")
                .append("<td>").append(cliente.getApellidoPaterno()).append("</td>")
                .append("<td>").append(cliente.getApellidoMaterno()).append("</td>")
                .append("<td>").append(cliente.getDireccion()).append("</td>")
                .append("<td>").append(cliente.getCorreo()).append("</td>")
                .append("<td>").append(cliente.getFechaIngreso()).append("</td>")
                .append("</tr>");
        }

        htmlContent.append("</table>");
        htmlContent.append("</body></html>");

        // Convertir el HTML a PDF utilizando Flying Saucer
        return convertirHtmlAPdf(htmlContent.toString());
    }

    private byte[] convertirHtmlAPdf(String htmlContent) throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PdfRendererBuilder builder = new PdfRendererBuilder();
        builder.withHtmlContent(htmlContent, null);
        builder.toStream(outputStream);
        builder.run();
        return outputStream.toByteArray();
    }
}
