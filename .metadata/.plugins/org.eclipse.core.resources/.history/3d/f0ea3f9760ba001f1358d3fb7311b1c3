package com.proyecto.controller;

import com.proyecto.models.Cliente;
import com.proyecto.service.ClienteService;
import com.openhtmltopdf.pdfboxout.PdfRendererBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.thymeleaf.context.Context;
import org.thymeleaf.spring6.SpringTemplateEngine;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

import java.io.ByteArrayOutputStream;
import java.util.List;

@Controller
@RequestMapping("/reportes")
public class ReporteClienteController {

    @Autowired
    private ClienteService clienteService;

    // Endpoint para generar el reporte PDF
    @GetMapping(value = "/clientes", produces = MediaType.APPLICATION_PDF_VALUE)
    public ResponseEntity<byte[]> generarReporteClientes(Model model) {
        try {
            // Obtener la lista de clientes desde la base de datos
            List<Cliente> clientes = clienteService.listarTodos();

            // Agregar los datos al modelo para ser procesados en la plantilla HTML
            model.addAttribute("clientes", clientes);

            // Renderizar el HTML (en este caso, usando Thymeleaf)
            String htmlContent = renderizarHTML(model);

            // Convertir el HTML a PDF
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            PdfRendererBuilder builder = new PdfRendererBuilder();
            builder.useFastMode();
            builder.withHtmlContent(htmlContent, null);
            builder.toStream(baos);
            builder.run();

            // Configurar los encabezados para la respuesta HTTP (PDF)
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_PDF);
            headers.setContentDispositionFormData("filename", "reporte_clientes.pdf");

            return ResponseEntity.ok()
                    .headers(headers)
                    .body(baos.toByteArray());
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }

    // Método auxiliar para renderizar la plantilla HTML con Thymeleaf
    private String renderizarHTML(Model model) {
        // En este caso, debes tener un motor de plantillas Thymeleaf configurado en tu aplicación Spring Boot
        // Aquí estamos usando un 'TemplateEngine' para procesar el HTML
        SpringTemplateEngine templateEngine = new SpringTemplateEngine();
        Context context = new Context();
        context.setVariables(model.asMap());
        return templateEngine.process("reporte-clientes.html", context);  // El nombre de la plantilla HTML
    }
}

